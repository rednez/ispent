type Currency {
  id: Int!
  name: String!
}

type Group {
  id: Int!
  name: String!
  color: String
  categories: [Category!]
}

input GroupCreateInput {
  name: String!
  color: String
}

input GroupUpdateInput {
  id: Int!
  name: String
  color: String
}

type Category {
  id: Int!
  name: String!
  favorite: Boolean!
  color: String
}

input CategoryCreateInput {
  name: String!
  groupId: Int!
  favorite: Boolean!
  color: String
}

input CategoryUpdateInput {
  id: Int!
  name: String
  favorite: Boolean
  color: String
}

input OperationsParams {
  currencyId: Int
  groupId: Int
  categoryId: Int
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  dateTimeStart: String
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  dateTimeEnd: String
  limit: Int
}

type Operation {
  id: Int!
  amount: Float!
  currency: Currency!
  category: Category!
  group: Group!
  dateTime: String!
  withdrawalAmount: Float
  withdrawalCurrencyId: Int
  withdrawalCurrencyName: String
  comment: String
}

input OperationCreateInput {
  amount: Float!
  currencyId: Int!
  categoryId: Int!
  groupId: Int!
  dateTime: String
  withdrawalAmount: Float
  withdrawalCurrencyId: Int
  comment: String
}

input OperationUpdateInput {
  id: Int!
  amount: Float
  currencyId: Int
  categoryId: Int
  groupId: Int
  dateTime: String
  withdrawalAmount: Float
  withdrawalCurrencyId: Int
  comment: String
}

enum BudgetSummaryType {
  CURRENCY
  GROUP
  CATEGORY
}

input BudgetSummaryParams {
  type: BudgetSummaryType!
  currencyId: Int
  groupId: Int
  categoryId: Int
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  dateTimeStart: String
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  dateTimeEnd: String
}

input BudgetsParams {
  """
  ISO 8601
  Must be presented on the first day of the month in UTC
  """
  date: String!
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  prevOperationsDateTimeStart: String
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  prevOperationsDateTimeEnd: String
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  currentOperationsDateTimeStart: String
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  currentOperationsDateTimeEnd: String
}

input CreateBudgetRecordInput {
  amount: Float!
  currencyId: Int!
  categoryId: Int!
  groupId: Int!
  dateTime: String!
}

input GenerateBudgetsRecordsInput {
  """
  ISO 8601
  Must be presented on the first day of the month in UTC
  """
  date: String!
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  prevOperationsDateTimeStart: String!
  """
  ISO 8601
  Must be presented in the local time of a web-client
  """
  prevOperationsDateTimeEnd: String!
}

type BudgetRecord {
  amount: Float!
  prevPlannedAmount: Float!
  prevSpentAmount: Float!
  currentSpentAmount: Float!
  currency: Currency!
  category: Category!
  group: Group!
  """
  ISO 8601
  Presented by the first day of the month in UTC
  """
  date: String!
}

type BudgetSummary {
  parentId: Int!
  type: BudgetSummaryType!
  title: String!
  planned: Float!
  spent: Float!
  color: String
}

type DeleteManyResponse {
  count: Int!
}

type Query {
  currencies: [Currency!]!
  currency(id: Int!): Currency
  groups: [Group!]!
  group(id: Int!): Group
  categories: [Category!]!
  category(id: Int!): Category
  operations(params: OperationsParams): [Operation!]!
  operation(id: Int!): Operation
  budgetsSummary(params: BudgetSummaryParams!): [BudgetSummary!]!
  budgets(params: BudgetsParams!): [BudgetRecord!]!
}

type Mutation {
  recreateManyBudgetsRecords(
    input: [CreateBudgetRecordInput!]!
  ): [BudgetRecord!]!
  generateManyBudgetsRecords(input: GenerateBudgetsRecordsInput!): [BudgetRecord!]!
  deleteManyBudgetsRecords(date: String!): DeleteManyResponse!
  createOperation(params: OperationCreateInput!): Operation!
  createCurrency(name: String!): Currency!
  createGroup(params: GroupCreateInput!): Group!
  createCategory(params: CategoryCreateInput!): Category!
  updateOperation(params: OperationUpdateInput!): Operation!
  updateCurrency(id: Int!, name: String!): Currency!
  updateGroup(params: GroupUpdateInput!): Group!
  updateCategory(params: CategoryUpdateInput!): Category!
  deleteOperation(id: Int!): Operation!
  deleteCurrency(id: Int!): Currency!
  deleteGroup(id: Int!): Group!
  deleteCategory(id: Int!): Category!
}
